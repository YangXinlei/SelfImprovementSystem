{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["host","infoUrl","updateInfoUrl","App","props","state","info","request","get","err","res","console","log","body","setState","JSON","parse","post","this","json","books","length","bookCards","forEach","book","index","push","Fragment","key","Header","title","name","Body","style","textAlign","height","Item","fontSize","marginLeft","flex","marginRight","defaultValue","value","current","min","max","pages","onChange","currentBook","onAfterChange","updateInfo","Footer","extra","size","blogs","generalStudy","gain","commits","className","createBookCards","onClick","newInfo","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f030826f.chunk.js","sourcesContent":["import React from 'react';\nimport request from 'request';\nimport { Flex, Card, WingBlank, WhiteSpace, Slider, Button } from 'antd-mobile';\nimport 'antd-mobile/dist/antd-mobile.css'\nimport './App.css';\n\n// const host = 'http://localhost:4000';\nconst host = 'http://39.98.59.86:31117';\nconst infoUrl = `${host}/info`;\nconst updateInfoUrl = `${host}/updateinfo`;\n\n/*\n{\n  books:[\n    {\n      name:'xxx'\n      pages:499\n      current:200\n      type:'tech' -> 'tech'/'novel'/'language'/'other'\n    },\n  ]\n  blogs:3,\n  commits:1,\n  generalStudy:65 (min),\n  gain: 45.2 (￥)\n}\n */\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      info: {},\n    }\n  }\n\n  componentWillMount() {\n    request.get(infoUrl, (err, res) => {\n      console.log('=========');\n      console.log(res.body);\n\n      this.setState({info:JSON.parse(res.body)});\n    });\n  }\n\n  updateInfo(info) {\n    request.post(updateInfoUrl, { body: info || this.state.info, json: true}, (err, res, body) => {\n      console.log(body);\n      this.setState({info:body});\n    });\n  }\n\n  createBookCards() {\n    const { books } = this.state.info || {};\n    if (!books || !books.length) {\n      return;\n    }\n    let bookCards = [];\n    books.forEach((book, index) =>{\n      bookCards.push((\n        <React.Fragment key={index}>\n        <Card>\n          <Card.Header title={`《${book.name}》`}/>\n          <Card.Body>\n            <Flex style={{textAlign:\"center\", height:30}}>\n              <Flex.Item style={{fontSize:15, marginLeft:0}}>0</Flex.Item>\n              <Flex.Item style={{flex:15}}>\n                <Slider\n                  style={{ marginRight: 8 }}\n                  defaultValue={0}\n                  value={book.current}\n                  min={0}\n                  max={book.pages}\n                  onChange={(value) => {\n                    const { info } = this.state;\n                    const currentBook = {\n                      ...info.books[index],\n                      current: value\n                    };\n                    info.books[index] = currentBook;\n                    this.setState({info : info});\n                  }}\n                  onAfterChange={(value) => {\n                    const { info } = this.state;\n                    info.books[index].current = value;\n                    this.updateInfo(info);\n                  }}\n                />\n            </Flex.Item>\n            <Flex.Item style={{fontSize:15, marginLeft:0}}>{book.pages}</Flex.Item>\n            </Flex>\n          </Card.Body>\n          <Card.Footer extra={this.state.info.books[index].current} />\n        </Card>\n        <WhiteSpace size=\"lg\"/>\n        </React.Fragment>\n      ));\n    })\n    return bookCards;\n  }\n\n  render() {\n    const { blogs, generalStudy, gain, commits } = this.state.info || {};\n    return (\n      <div className=\"App\">\n          <WingBlank>\n            <div className=\"sub-title\">进行中</div>\n            <WhiteSpace size=\"lg\"/>\n            {this.createBookCards()}\n            <WhiteSpace size=\"lg\"/>\n            <div className=\"sub-title\">博客阅读统计</div>\n            <Button className=\"round-button\" onClick={()=>{\n              let info = this.state.info;\n              if (!info) {\n                return;\n              }\n              let newInfo = {\n                ...info,\n                blogs: info.blogs + 1\n              }\n              this.setState({\n                info: newInfo\n              });\n              this.updateInfo(newInfo);\n            }}>{blogs || 0}</Button>\n\n            <WhiteSpace size=\"lg\"/>\n            <div className=\"sub-title\">commit输出</div>\n            <Button className=\"round-button\" onClick={()=>{\n              let info = this.state.info;\n              if (!info) {\n                return;\n              }\n              let newInfo = {\n                ...info,\n                commits: info.commits + 1\n              }\n              this.setState({\n                info: newInfo\n              });\n              this.updateInfo(newInfo);\n            }}>{commits || 0}</Button>\n\n            <WhiteSpace size=\"lg\"/>\n            <div className=\"sub-title\">general study</div>\n            <Button className=\"round-button\" onClick={()=>{\n              let info = this.state.info;\n              if (!info) {\n                return;\n              }\n              let newInfo = {\n                ...info,\n                generalStudy: info.generalStudy + 5\n              }\n              this.setState({\n                info: newInfo\n              });\n              this.updateInfo(newInfo);\n            }}>{generalStudy || 0}</Button>\n            <WhiteSpace size=\"lg\"/>\n            <div className=\"sub-title\">gain</div>\n            <Button className=\"round-button\" disabled style={{fontSize:20}}>￥{gain || 0}</Button>\n            \n          </WingBlank>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}